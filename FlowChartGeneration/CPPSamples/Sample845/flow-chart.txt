 START ----->  std::pair<int, int> ----->  find_platform (std::vector<int> &arr, std::vector<int> &dep, int n) ----->  std::sort (arr.begin (), arr.end ()); ----->  std::sort (dep.begin (), dep.end ()); ----->  int plat_needed = 1; ----->  int result = 1; ----->  int i = 1; ----->  int j = 0; -----> while (i < n && j < n) ----->  if (arr[i] <= dep[j]) ----->  plat_needed++; ----->  i++; ----->  if (plat_needed > result) ----->  result = plat_needed; ----->  return { result, 0 }; -----> END
 START ----->  std::pair<int, int> ----->  find_platform (std::vector<int> &arr, std::vector<int> &dep, int n) ----->  std::sort (arr.begin (), arr.end ()); ----->  std::sort (dep.begin (), dep.end ()); ----->  int plat_needed = 1; ----->  int result = 1; ----->  int i = 1; ----->  int j = 0; -----> while (i < n && j < n) ----->  if (arr[i] <= dep[j]) ----->  plat_needed++; ----->  i++; ----->  if (plat_needed > result) ----->  return { result, 0 }; -----> END
 START ----->  std::pair<int, int> ----->  find_platform (std::vector<int> &arr, std::vector<int> &dep, int n) ----->  std::sort (arr.begin (), arr.end ()); ----->  std::sort (dep.begin (), dep.end ()); ----->  int plat_needed = 1; ----->  int result = 1; ----->  int i = 1; ----->  int j = 0; -----> while (i < n && j < n) ----->  if (arr[i] <= dep[j]) ----->  else ----->  plat_needed--; ----->  j++; ----->  if (plat_needed > result) ----->  result = plat_needed; ----->  return { result, 0 }; -----> END
 START ----->  std::pair<int, int> ----->  find_platform (std::vector<int> &arr, std::vector<int> &dep, int n) ----->  std::sort (arr.begin (), arr.end ()); ----->  std::sort (dep.begin (), dep.end ()); ----->  int plat_needed = 1; ----->  int result = 1; ----->  int i = 1; ----->  int j = 0; -----> while (i < n && j < n) ----->  if (arr[i] <= dep[j]) ----->  else ----->  plat_needed--; ----->  j++; ----->  if (plat_needed > result) ----->  return { result, 0 }; -----> END
