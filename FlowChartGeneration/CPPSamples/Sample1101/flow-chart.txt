 START ----->  std::string ----->  intersection (std::pair<int, int> interval1, std::pair<int, int> interval2) ----->  auto is_prime = [] (int num) { ----->  if (num == 1 || num == 0) ----->  return false; -----> END
 START ----->  std::string ----->  intersection (std::pair<int, int> interval1, std::pair<int, int> interval2) ----->  auto is_prime = [] (int num) { ----->  if (num == 1 || num == 0) ----->  if (num == 2) ----->  return true; -----> END
 START ----->  std::string ----->  intersection (std::pair<int, int> interval1, std::pair<int, int> interval2) ----->  auto is_prime = [] (int num) { ----->  if (num == 1 || num == 0) ----->  if (num == 2) -----> for (int i = 2; i < num; i++) ----->  if (num % i == 0) ----->  return false; -----> END
 START ----->  std::string ----->  intersection (std::pair<int, int> interval1, std::pair<int, int> interval2) ----->  auto is_prime = [] (int num) { ----->  if (num == 1 || num == 0) ----->  if (num == 2) -----> for (int i = 2; i < num; i++) ----->  if (num % i == 0) ----->  return true; -----> END
