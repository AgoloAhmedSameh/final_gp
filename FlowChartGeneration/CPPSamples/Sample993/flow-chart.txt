 START ----->  std::string ----->  sort_numbers (const std::string &numbers) ----->  std::map<std::string, int> value_map = { ----->  { "zero", 0 }, ----->  { "one", 1 }, ----->  { "two", 2 }, ----->  { "three", 3 }, ----->  { "four", 4 }, ----->  { "five", 5 }, ----->  { "six", 6 }, ----->  { "seven", 7 }, ----->  { "eight", 8 }, ----->  { "nine", 9 } ----->  }; ----->  std::istringstream iss (numbers); ----->  std::vector<std::string> num_vector; ----->  std::string num; -----> while (iss >> num) ----->  if (!num.empty ()) ----->  num_vector.push_back (num); ----->  std::sort (num_vector.begin (), num_vector.end (), [&] (const std::string &a, const std::string &b) { ----->  return value_map[a] < value_map[b]; -----> END
 START ----->  std::string ----->  sort_numbers (const std::string &numbers) ----->  std::map<std::string, int> value_map = { ----->  { "zero", 0 }, ----->  { "one", 1 }, ----->  { "two", 2 }, ----->  { "three", 3 }, ----->  { "four", 4 }, ----->  { "five", 5 }, ----->  { "six", 6 }, ----->  { "seven", 7 }, ----->  { "eight", 8 }, ----->  { "nine", 9 } ----->  }; ----->  std::istringstream iss (numbers); ----->  std::vector<std::string> num_vector; ----->  std::string num; -----> while (iss >> num) ----->  if (!num.empty ()) ----->  std::sort (num_vector.begin (), num_vector.end (), [&] (const std::string &a, const std::string &b) { ----->  return value_map[a] < value_map[b]; -----> END
