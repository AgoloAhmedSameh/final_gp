 START ----->  using namespace std; ----->  pair<int, int> ----->  longest_subseq_with_diff_one (vector<int> &arr, int n) ----->  vector<int> dp (n, 1); -----> for (int i = 0; i < n; i++) -----> for (int j = 0; j < i; j++) ----->  if ((arr[i] == arr[j] + 1) || (arr[i] == arr[j] - 1)) ----->  dp[i] = max (dp[i], dp[j] + 1);
 START ----->  using namespace std; ----->  pair<int, int> ----->  longest_subseq_with_diff_one (vector<int> &arr, int n) ----->  vector<int> dp (n, 1); -----> for (int i = 0; i < n; i++) -----> for (int j = 0; j < i; j++) ----->  if ((arr[i] == arr[j] + 1) || (arr[i] == arr[j] - 1)) ----->  for (int j = 0; j < i; j++) ----->  if ((arr[i] == arr[j] + 1) || (arr[i] == arr[j] - 1)) ----->  dp[i] = max (dp[i], dp[j] + 1);
 START ----->  using namespace std; ----->  pair<int, int> ----->  longest_subseq_with_diff_one (vector<int> &arr, int n) ----->  vector<int> dp (n, 1); -----> for (int i = 0; i < n; i++) -----> for (int j = 0; j < i; j++) ----->  if ((arr[i] == arr[j] + 1) || (arr[i] == arr[j] - 1)) ----->  for (int j = 0; j < i; j++) ----->  int result = 1; -----> for (int i = 0; i < n; i++) ----->  if (result < dp[i]) ----->  result = dp[i]; ----->  return { result, 0 }; -----> END
 START ----->  using namespace std; ----->  pair<int, int> ----->  longest_subseq_with_diff_one (vector<int> &arr, int n) ----->  vector<int> dp (n, 1); -----> for (int i = 0; i < n; i++) -----> for (int j = 0; j < i; j++) ----->  if ((arr[i] == arr[j] + 1) || (arr[i] == arr[j] - 1)) ----->  for (int j = 0; j < i; j++) ----->  int result = 1; -----> for (int i = 0; i < n; i++) ----->  if (result < dp[i]) ----->  return { result, 0 }; -----> END
