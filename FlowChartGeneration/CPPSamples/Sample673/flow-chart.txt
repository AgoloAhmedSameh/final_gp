 START ----->  std::string ----->  remove_duplicate (const std::string &str) ----->  std::istringstream iss (str); ----->  std::unordered_map<std::string, bool> wordMap; ----->  std::vector<std::string> uniqueWords; ----->  std::string word; -----> while (iss >> word) ----->  if (wordMap.find (word) == wordMap.end ()) ----->  wordMap[word] = true; ----->  uniqueWords.push_back (word); ----->  std::string result; -----> for (const auto &w : uniqueWords) ----->  result += w + " "; ----->  if (!result.empty ()) ----->  result.pop_back (); ----->  return result; -----> END
 START ----->  std::string ----->  remove_duplicate (const std::string &str) ----->  std::istringstream iss (str); ----->  std::unordered_map<std::string, bool> wordMap; ----->  std::vector<std::string> uniqueWords; ----->  std::string word; -----> while (iss >> word) ----->  if (wordMap.find (word) == wordMap.end ()) ----->  wordMap[word] = true; ----->  uniqueWords.push_back (word); ----->  std::string result; -----> for (const auto &w : uniqueWords) ----->  result += w + " "; ----->  if (!result.empty ()) ----->  return result; -----> END
 START ----->  std::string ----->  remove_duplicate (const std::string &str) ----->  std::istringstream iss (str); ----->  std::unordered_map<std::string, bool> wordMap; ----->  std::vector<std::string> uniqueWords; ----->  std::string word; -----> while (iss >> word) ----->  if (wordMap.find (word) == wordMap.end ()) ----->  std::string result; -----> for (const auto &w : uniqueWords) ----->  result += w + " "; ----->  if (!result.empty ()) ----->  result.pop_back (); ----->  return result; -----> END
 START ----->  std::string ----->  remove_duplicate (const std::string &str) ----->  std::istringstream iss (str); ----->  std::unordered_map<std::string, bool> wordMap; ----->  std::vector<std::string> uniqueWords; ----->  std::string word; -----> while (iss >> word) ----->  if (wordMap.find (word) == wordMap.end ()) ----->  std::string result; -----> for (const auto &w : uniqueWords) ----->  result += w + " "; ----->  if (!result.empty ()) ----->  return result; -----> END
