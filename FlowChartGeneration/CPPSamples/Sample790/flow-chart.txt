 START ----->  std::tuple<std::vector<std::string> > ----->  remove_nested (const std::tuple<std::string, std::tuple<std::string>, std::string> &test_tup) ----->  std::vector<std::string> res; ----->  int count = 0; ----->  std::apply ([&] (auto &&...elems) { ----->  (([&] { ----->  if (!std::is_same_v<decltype (elems), std::tuple<std::string> >) ----->  res.push_back (elems); ----->  }()), ----->  ...); ----->  }, ----->  test_tup); ----->  return std::make_tuple (res); -----> END
 START ----->  std::tuple<std::vector<std::string> > ----->  remove_nested (const std::tuple<std::string, std::tuple<std::string>, std::string> &test_tup) ----->  std::vector<std::string> res; ----->  int count = 0; ----->  std::apply ([&] (auto &&...elems) { ----->  (([&] { ----->  if (!std::is_same_v<decltype (elems), std::tuple<std::string> >) ----->  }()), ----->  ...); ----->  }, ----->  test_tup); ----->  return std::make_tuple (res); -----> END
