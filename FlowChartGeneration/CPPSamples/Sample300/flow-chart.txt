 START ----->  int ----->  dict_depth (const std::variant<std::map<std::string, std::variant<int, std::map<std::string, std::variant<int> > > >, int> &d) ----->  if (auto dict = std::get_if<std::map<std::string, std::variant<int, std::map<std::string, std::variant<int> > > > > (&d)) ----->  return 1 + (dict->empty () ? 0 : std::max_element (dict->begin (), dict->end (), [] (const auto &a, const auto &b) { -----> END
 START ----->  int ----->  dict_depth (const std::variant<std::map<std::string, std::variant<int, std::map<std::string, std::variant<int> > > >, int> &d) ----->  if (auto dict = std::get_if<std::map<std::string, std::variant<int, std::map<std::string, std::variant<int> > > > > (&d)) ----->  return dict_depth (a.second) < dict_depth (b.second); -----> END
 START ----->  int ----->  dict_depth (const std::variant<std::map<std::string, std::variant<int, std::map<std::string, std::variant<int> > > >, int> &d) ----->  if (auto dict = std::get_if<std::map<std::string, std::variant<int, std::map<std::string, std::variant<int> > > > > (&d)) ----->  })->second); ----->  return 0; -----> END
 START ----->  int ----->  dict_depth (const std::variant<std::map<std::string, std::variant<int, std::map<std::string, std::variant<int> > > >, int> &d) ----->  if (auto dict = std::get_if<std::map<std::string, std::variant<int, std::map<std::string, std::variant<int> > > > > (&d)) ----->  return 0; -----> END
