 START ----->  int ----->  max_sum (std::vector<std::vector<int> > &tri, int n) ----->  if (n > 1) ----->  tri[1][1] = tri[1][1] + tri[0][0]; ----->  tri[1][0] = tri[1][0] + tri[0][0]; -----> for (int i = 2; i < n; i++) ----->  tri[i][0] = tri[i][0] + tri[i - 1][0]; ----->  tri[i][i] = tri[i][i] + tri[i - 1][i - 1]; -----> for (int j = 1; j < i; j++) ----->  if (tri[i][j] + tri[i - 1][j - 1] >= tri[i][j] + tri[i - 1][j]) ----->  tri[i][j] = tri[i][j] + tri[i - 1][j - 1];
 START ----->  int ----->  max_sum (std::vector<std::vector<int> > &tri, int n) ----->  if (n > 1) ----->  tri[1][1] = tri[1][1] + tri[0][0]; ----->  tri[1][0] = tri[1][0] + tri[0][0]; -----> for (int i = 2; i < n; i++) ----->  tri[i][0] = tri[i][0] + tri[i - 1][0]; ----->  tri[i][i] = tri[i][i] + tri[i - 1][i - 1]; -----> for (int j = 1; j < i; j++) ----->  if (tri[i][j] + tri[i - 1][j - 1] >= tri[i][j] + tri[i - 1][j]) ----->  else ----->  tri[i][j] = tri[i][j] + tri[i - 1][j]; ----->  for (int j = 1; j < i; j++) ----->  if (tri[i][j] + tri[i - 1][j - 1] >= tri[i][j] + tri[i - 1][j]) ----->  tri[i][j] = tri[i][j] + tri[i - 1][j - 1];
 START ----->  int ----->  max_sum (std::vector<std::vector<int> > &tri, int n) ----->  if (n > 1) ----->  tri[1][1] = tri[1][1] + tri[0][0]; ----->  tri[1][0] = tri[1][0] + tri[0][0]; -----> for (int i = 2; i < n; i++) ----->  tri[i][0] = tri[i][0] + tri[i - 1][0]; ----->  tri[i][i] = tri[i][i] + tri[i - 1][i - 1]; -----> for (int j = 1; j < i; j++) ----->  if (tri[i][j] + tri[i - 1][j - 1] >= tri[i][j] + tri[i - 1][j]) ----->  else ----->  tri[i][j] = tri[i][j] + tri[i - 1][j]; ----->  for (int j = 1; j < i; j++) ----->  if (tri[i][j] + tri[i - 1][j - 1] >= tri[i][j] + tri[i - 1][j]) ----->  else ----->  tri[i][j] = tri[i][j] + tri[i - 1][j];
 START ----->  int ----->  max_sum (std::vector<std::vector<int> > &tri, int n) ----->  if (n > 1) ----->  tri[1][1] = tri[1][1] + tri[0][0]; ----->  tri[1][0] = tri[1][0] + tri[0][0]; -----> for (int i = 2; i < n; i++) ----->  tri[i][0] = tri[i][0] + tri[i - 1][0]; ----->  tri[i][i] = tri[i][i] + tri[i - 1][i - 1]; -----> for (int j = 1; j < i; j++) ----->  if (tri[i][j] + tri[i - 1][j - 1] >= tri[i][j] + tri[i - 1][j]) ----->  else ----->  tri[i][j] = tri[i][j] + tri[i - 1][j]; ----->  for (int j = 1; j < i; j++) ----->  return *std::max_element (tri[n - 1].begin (), tri[n - 1].end ()); -----> END
 START ----->  int ----->  max_sum (std::vector<std::vector<int> > &tri, int n) ----->  if (n > 1) -----> for (int i = 2; i < n; i++) ----->  tri[i][0] = tri[i][0] + tri[i - 1][0]; ----->  tri[i][i] = tri[i][i] + tri[i - 1][i - 1]; -----> for (int j = 1; j < i; j++) ----->  if (tri[i][j] + tri[i - 1][j - 1] >= tri[i][j] + tri[i - 1][j]) ----->  tri[i][j] = tri[i][j] + tri[i - 1][j - 1];
 START ----->  int ----->  max_sum (std::vector<std::vector<int> > &tri, int n) ----->  if (n > 1) -----> for (int i = 2; i < n; i++) ----->  tri[i][0] = tri[i][0] + tri[i - 1][0]; ----->  tri[i][i] = tri[i][i] + tri[i - 1][i - 1]; -----> for (int j = 1; j < i; j++) ----->  if (tri[i][j] + tri[i - 1][j - 1] >= tri[i][j] + tri[i - 1][j]) ----->  else ----->  tri[i][j] = tri[i][j] + tri[i - 1][j]; ----->  for (int j = 1; j < i; j++) ----->  if (tri[i][j] + tri[i - 1][j - 1] >= tri[i][j] + tri[i - 1][j]) ----->  tri[i][j] = tri[i][j] + tri[i - 1][j - 1];
 START ----->  int ----->  max_sum (std::vector<std::vector<int> > &tri, int n) ----->  if (n > 1) -----> for (int i = 2; i < n; i++) ----->  tri[i][0] = tri[i][0] + tri[i - 1][0]; ----->  tri[i][i] = tri[i][i] + tri[i - 1][i - 1]; -----> for (int j = 1; j < i; j++) ----->  if (tri[i][j] + tri[i - 1][j - 1] >= tri[i][j] + tri[i - 1][j]) ----->  else ----->  tri[i][j] = tri[i][j] + tri[i - 1][j]; ----->  for (int j = 1; j < i; j++) ----->  if (tri[i][j] + tri[i - 1][j - 1] >= tri[i][j] + tri[i - 1][j]) ----->  else ----->  tri[i][j] = tri[i][j] + tri[i - 1][j];
 START ----->  int ----->  max_sum (std::vector<std::vector<int> > &tri, int n) ----->  if (n > 1) -----> for (int i = 2; i < n; i++) ----->  tri[i][0] = tri[i][0] + tri[i - 1][0]; ----->  tri[i][i] = tri[i][i] + tri[i - 1][i - 1]; -----> for (int j = 1; j < i; j++) ----->  if (tri[i][j] + tri[i - 1][j - 1] >= tri[i][j] + tri[i - 1][j]) ----->  else ----->  tri[i][j] = tri[i][j] + tri[i - 1][j]; ----->  for (int j = 1; j < i; j++) ----->  return *std::max_element (tri[n - 1].begin (), tri[n - 1].end ()); -----> END
