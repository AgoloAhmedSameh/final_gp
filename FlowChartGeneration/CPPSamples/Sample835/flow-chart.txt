 START ----->  std::pair<int, int> ----->  max_sub_array_sum (const std::vector<int> &a) ----->  int max_so_far = std::numeric_limits<int>::min (); ----->  int max_ending_here = 0; ----->  int start = 0; ----->  int end = 0; ----->  int s = 0; -----> for (size_t i = 0; i < a.size (); i++) ----->  max_ending_here += a[i]; ----->  if (max_so_far < max_ending_here) ----->  max_so_far = max_ending_here; ----->  start = s; ----->  end = i; ----->  if (max_ending_here < 0) ----->  max_ending_here = 0; ----->  s = i + 1; ----->  return std::make_pair (end - start + 1, max_so_far); -----> END
 START ----->  std::pair<int, int> ----->  max_sub_array_sum (const std::vector<int> &a) ----->  int max_so_far = std::numeric_limits<int>::min (); ----->  int max_ending_here = 0; ----->  int start = 0; ----->  int end = 0; ----->  int s = 0; -----> for (size_t i = 0; i < a.size (); i++) ----->  max_ending_here += a[i]; ----->  if (max_so_far < max_ending_here) ----->  max_so_far = max_ending_here; ----->  start = s; ----->  end = i; ----->  if (max_ending_here < 0) ----->  return std::make_pair (end - start + 1, max_so_far); -----> END
 START ----->  std::pair<int, int> ----->  max_sub_array_sum (const std::vector<int> &a) ----->  int max_so_far = std::numeric_limits<int>::min (); ----->  int max_ending_here = 0; ----->  int start = 0; ----->  int end = 0; ----->  int s = 0; -----> for (size_t i = 0; i < a.size (); i++) ----->  max_ending_here += a[i]; ----->  if (max_so_far < max_ending_here) ----->  if (max_ending_here < 0) ----->  max_ending_here = 0; ----->  s = i + 1; ----->  return std::make_pair (end - start + 1, max_so_far); -----> END
 START ----->  std::pair<int, int> ----->  max_sub_array_sum (const std::vector<int> &a) ----->  int max_so_far = std::numeric_limits<int>::min (); ----->  int max_ending_here = 0; ----->  int start = 0; ----->  int end = 0; ----->  int s = 0; -----> for (size_t i = 0; i < a.size (); i++) ----->  max_ending_here += a[i]; ----->  if (max_so_far < max_ending_here) ----->  if (max_ending_here < 0) ----->  return std::make_pair (end - start + 1, max_so_far); -----> END
