 START ----->  std::tuple<> ----->  even_ele (const std::tuple<> &test_tuple, std::function<bool (int)> even_fnc) ----->  std::tuple<> res; -----> for (const auto &ele : test_tuple) ----->  if (std::holds_alternative<std::tuple<> > (ele)) ----->  res = std::tuple_cat (res, std::make_tuple (even_ele (std::get<std::tuple<> > (ele), even_fnc))); ----->  return res; -----> END
 START ----->  std::tuple<> ----->  even_ele (const std::tuple<> &test_tuple, std::function<bool (int)> even_fnc) ----->  std::tuple<> res; -----> for (const auto &ele : test_tuple) ----->  if (std::holds_alternative<std::tuple<> > (ele)) ----->  else if (even_fnc (std::get<int> (ele))) ----->  res = std::tuple_cat (res, std::make_tuple (std::get<int> (ele))); ----->  return res; -----> END
 START ----->  std::tuple<> ----->  even_ele (const std::tuple<> &test_tuple, std::function<bool (int)> even_fnc) ----->  std::tuple<> res; -----> for (const auto &ele : test_tuple) ----->  if (std::holds_alternative<std::tuple<> > (ele)) ----->  else if (even_fnc (std::get<int> (ele))) ----->  return res; -----> END
