 START ----->  using namespace std; ----->  pair<int, int> ----->  lps (const string &str) ----->  int n = str.length (); ----->  vector<vector<int> > L (n, vector<int> (n, 0)); -----> for (int i = 0; i < n; i++) ----->  L[i][i] = 1; -----> for (int cl = 2; cl <= n; cl++) -----> for (int i = 0; i <= n - cl; i++) ----->  int j = i + cl - 1; ----->  if (str[i] == str[j] && cl == 2) ----->  L[i][j] = 2;
 START ----->  using namespace std; ----->  pair<int, int> ----->  lps (const string &str) ----->  int n = str.length (); ----->  vector<vector<int> > L (n, vector<int> (n, 0)); -----> for (int i = 0; i < n; i++) ----->  L[i][i] = 1; -----> for (int cl = 2; cl <= n; cl++) -----> for (int i = 0; i <= n - cl; i++) ----->  int j = i + cl - 1; ----->  if (str[i] == str[j] && cl == 2) ----->  else if (str[i] == str[j]) ----->  L[i][j] = L[i + 1][j - 1] + 2; ----->  for (int i = 0; i <= n - cl; i++) ----->  int j = i + cl - 1; ----->  if (str[i] == str[j] && cl == 2) ----->  L[i][j] = 2;
 START ----->  using namespace std; ----->  pair<int, int> ----->  lps (const string &str) ----->  int n = str.length (); ----->  vector<vector<int> > L (n, vector<int> (n, 0)); -----> for (int i = 0; i < n; i++) ----->  L[i][i] = 1; -----> for (int cl = 2; cl <= n; cl++) -----> for (int i = 0; i <= n - cl; i++) ----->  int j = i + cl - 1; ----->  if (str[i] == str[j] && cl == 2) ----->  else if (str[i] == str[j]) ----->  L[i][j] = L[i + 1][j - 1] + 2; ----->  for (int i = 0; i <= n - cl; i++) ----->  int j = i + cl - 1; ----->  if (str[i] == str[j] && cl == 2) ----->  else if (str[i] == str[j]) ----->  L[i][j] = L[i + 1][j - 1] + 2;
 START ----->  using namespace std; ----->  pair<int, int> ----->  lps (const string &str) ----->  int n = str.length (); ----->  vector<vector<int> > L (n, vector<int> (n, 0)); -----> for (int i = 0; i < n; i++) ----->  L[i][i] = 1; -----> for (int cl = 2; cl <= n; cl++) -----> for (int i = 0; i <= n - cl; i++) ----->  int j = i + cl - 1; ----->  if (str[i] == str[j] && cl == 2) ----->  else if (str[i] == str[j]) ----->  L[i][j] = L[i + 1][j - 1] + 2; ----->  for (int i = 0; i <= n - cl; i++) ----->  int j = i + cl - 1; ----->  if (str[i] == str[j] && cl == 2) ----->  else if (str[i] == str[j]) ----->  else ----->  L[i][j] = max (L[i][j - 1], L[i + 1][j]); ----->  for (int i = 0; i <= n - cl; i++) ----->  int j = i + cl - 1; ----->  if (str[i] == str[j] && cl == 2) ----->  L[i][j] = 2;
 START ----->  using namespace std; ----->  pair<int, int> ----->  lps (const string &str) ----->  int n = str.length (); ----->  vector<vector<int> > L (n, vector<int> (n, 0)); -----> for (int i = 0; i < n; i++) ----->  L[i][i] = 1; -----> for (int cl = 2; cl <= n; cl++) -----> for (int i = 0; i <= n - cl; i++) ----->  int j = i + cl - 1; ----->  if (str[i] == str[j] && cl == 2) ----->  else if (str[i] == str[j]) ----->  L[i][j] = L[i + 1][j - 1] + 2; ----->  for (int i = 0; i <= n - cl; i++) ----->  int j = i + cl - 1; ----->  if (str[i] == str[j] && cl == 2) ----->  else if (str[i] == str[j]) ----->  else ----->  L[i][j] = max (L[i][j - 1], L[i + 1][j]); ----->  for (int i = 0; i <= n - cl; i++) ----->  int j = i + cl - 1; ----->  if (str[i] == str[j] && cl == 2) ----->  else if (str[i] == str[j]) ----->  L[i][j] = L[i + 1][j - 1] + 2;
 START ----->  using namespace std; ----->  pair<int, int> ----->  lps (const string &str) ----->  int n = str.length (); ----->  vector<vector<int> > L (n, vector<int> (n, 0)); -----> for (int i = 0; i < n; i++) ----->  L[i][i] = 1; -----> for (int cl = 2; cl <= n; cl++) -----> for (int i = 0; i <= n - cl; i++) ----->  int j = i + cl - 1; ----->  if (str[i] == str[j] && cl == 2) ----->  else if (str[i] == str[j]) ----->  L[i][j] = L[i + 1][j - 1] + 2; ----->  for (int i = 0; i <= n - cl; i++) ----->  int j = i + cl - 1; ----->  if (str[i] == str[j] && cl == 2) ----->  else if (str[i] == str[j]) ----->  else ----->  L[i][j] = max (L[i][j - 1], L[i + 1][j]); ----->  for (int i = 0; i <= n - cl; i++) ----->  int j = i + cl - 1; ----->  if (str[i] == str[j] && cl == 2) ----->  else if (str[i] == str[j]) ----->  else ----->  L[i][j] = max (L[i][j - 1], L[i + 1][j]);
 START ----->  using namespace std; ----->  pair<int, int> ----->  lps (const string &str) ----->  int n = str.length (); ----->  vector<vector<int> > L (n, vector<int> (n, 0)); -----> for (int i = 0; i < n; i++) ----->  L[i][i] = 1; -----> for (int cl = 2; cl <= n; cl++) -----> for (int i = 0; i <= n - cl; i++) ----->  int j = i + cl - 1; ----->  if (str[i] == str[j] && cl == 2) ----->  else if (str[i] == str[j]) ----->  L[i][j] = L[i + 1][j - 1] + 2; ----->  for (int i = 0; i <= n - cl; i++) ----->  int j = i + cl - 1; ----->  if (str[i] == str[j] && cl == 2) ----->  else if (str[i] == str[j]) ----->  else ----->  L[i][j] = max (L[i][j - 1], L[i + 1][j]); ----->  for (int i = 0; i <= n - cl; i++) ----->  return { L[0][n - 1], 0 }; -----> END
 START ----->  using namespace std; ----->  pair<int, int> ----->  lps (const string &str) ----->  int n = str.length (); ----->  vector<vector<int> > L (n, vector<int> (n, 0)); -----> for (int i = 0; i < n; i++) ----->  L[i][i] = 1; -----> for (int cl = 2; cl <= n; cl++) -----> for (int i = 0; i <= n - cl; i++) ----->  int j = i + cl - 1; ----->  if (str[i] == str[j] && cl == 2) ----->  else if (str[i] == str[j]) ----->  L[i][j] = L[i + 1][j - 1] + 2; ----->  for (int i = 0; i <= n - cl; i++) ----->  return { L[0][n - 1], 0 }; -----> END
 START ----->  using namespace std; ----->  pair<int, int> ----->  lps (const string &str) ----->  int n = str.length (); ----->  vector<vector<int> > L (n, vector<int> (n, 0)); -----> for (int i = 0; i < n; i++) ----->  L[i][i] = 1; -----> for (int cl = 2; cl <= n; cl++) -----> for (int i = 0; i <= n - cl; i++) ----->  int j = i + cl - 1; ----->  if (str[i] == str[j] && cl == 2) ----->  else if (str[i] == str[j]) ----->  else ----->  L[i][j] = max (L[i][j - 1], L[i + 1][j]); ----->  for (int i = 0; i <= n - cl; i++) ----->  int j = i + cl - 1; ----->  if (str[i] == str[j] && cl == 2) ----->  L[i][j] = 2;
 START ----->  using namespace std; ----->  pair<int, int> ----->  lps (const string &str) ----->  int n = str.length (); ----->  vector<vector<int> > L (n, vector<int> (n, 0)); -----> for (int i = 0; i < n; i++) ----->  L[i][i] = 1; -----> for (int cl = 2; cl <= n; cl++) -----> for (int i = 0; i <= n - cl; i++) ----->  int j = i + cl - 1; ----->  if (str[i] == str[j] && cl == 2) ----->  else if (str[i] == str[j]) ----->  else ----->  L[i][j] = max (L[i][j - 1], L[i + 1][j]); ----->  for (int i = 0; i <= n - cl; i++) ----->  int j = i + cl - 1; ----->  if (str[i] == str[j] && cl == 2) ----->  else if (str[i] == str[j]) ----->  L[i][j] = L[i + 1][j - 1] + 2;
 START ----->  using namespace std; ----->  pair<int, int> ----->  lps (const string &str) ----->  int n = str.length (); ----->  vector<vector<int> > L (n, vector<int> (n, 0)); -----> for (int i = 0; i < n; i++) ----->  L[i][i] = 1; -----> for (int cl = 2; cl <= n; cl++) -----> for (int i = 0; i <= n - cl; i++) ----->  int j = i + cl - 1; ----->  if (str[i] == str[j] && cl == 2) ----->  else if (str[i] == str[j]) ----->  else ----->  L[i][j] = max (L[i][j - 1], L[i + 1][j]); ----->  for (int i = 0; i <= n - cl; i++) ----->  int j = i + cl - 1; ----->  if (str[i] == str[j] && cl == 2) ----->  else if (str[i] == str[j]) ----->  else ----->  L[i][j] = max (L[i][j - 1], L[i + 1][j]);
 START ----->  using namespace std; ----->  pair<int, int> ----->  lps (const string &str) ----->  int n = str.length (); ----->  vector<vector<int> > L (n, vector<int> (n, 0)); -----> for (int i = 0; i < n; i++) ----->  L[i][i] = 1; -----> for (int cl = 2; cl <= n; cl++) -----> for (int i = 0; i <= n - cl; i++) ----->  int j = i + cl - 1; ----->  if (str[i] == str[j] && cl == 2) ----->  else if (str[i] == str[j]) ----->  else ----->  L[i][j] = max (L[i][j - 1], L[i + 1][j]); ----->  for (int i = 0; i <= n - cl; i++) ----->  return { L[0][n - 1], 0 }; -----> END
