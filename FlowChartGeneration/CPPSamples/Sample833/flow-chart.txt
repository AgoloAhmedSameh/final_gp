 START ----->  std::vector<std::vector<int> > ----->  generate_matrix (int n) ----->  if (n <= 0) ----->  return {}; -----> END
 START ----->  std::vector<std::vector<int> > ----->  generate_matrix (int n) ----->  if (n <= 0) ----->  std::vector<std::vector<int> > matrix (n, std::vector<int> (n, 0)); ----->  int row_st = 0; ----->  int row_ed = n - 1; ----->  int col_st = 0; ----->  int col_ed = n - 1; ----->  int current = 1; -----> while (true) ----->  if (current > n * n) ----->  break; ----->  return matrix; -----> END
 START ----->  std::vector<std::vector<int> > ----->  generate_matrix (int n) ----->  if (n <= 0) ----->  std::vector<std::vector<int> > matrix (n, std::vector<int> (n, 0)); ----->  int row_st = 0; ----->  int row_ed = n - 1; ----->  int col_st = 0; ----->  int col_ed = n - 1; ----->  int current = 1; -----> while (true) ----->  if (current > n * n) -----> for (int c = col_st; c <= col_ed; c++) ----->  matrix[row_st][c] = current; ----->  current++; ----->  row_st++; -----> for (int r = row_st; r <= row_ed; r++) ----->  matrix[r][col_ed] = current; ----->  current++; ----->  col_ed--; -----> for (int c = col_ed; c >= col_st; c--) ----->  matrix[row_ed][c] = current; ----->  current++; ----->  row_ed--; -----> for (int r = row_ed; r >= row_st; r--) ----->  matrix[r][col_st] = current; ----->  current++; ----->  col_st++; ----->  return matrix; -----> END
