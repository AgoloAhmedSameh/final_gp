 START ----->  bool ----->  check_expression (const std::string &exp) ----->  if (exp.length () % 2 != 0) ----->  return false; -----> END
 START ----->  bool ----->  check_expression (const std::string &exp) ----->  if (exp.length () % 2 != 0) ----->  std::stack<char> stack; -----> for (char ch : exp) ----->  if (ch == '(' || ch == '{' || ch == '[') ----->  stack.push (ch); ----->  if (ch == ')' || ch == '}' || ch == ']') ----->  if (stack.empty ()) ----->  return false; -----> END
 START ----->  bool ----->  check_expression (const std::string &exp) ----->  if (exp.length () % 2 != 0) ----->  std::stack<char> stack; -----> for (char ch : exp) ----->  if (ch == '(' || ch == '{' || ch == '[') ----->  stack.push (ch); ----->  if (ch == ')' || ch == '}' || ch == ']') ----->  if (stack.empty ()) ----->  char top = stack.top (); ----->  stack.pop (); ----->  if ((top == '(' && ch != ')') || (top == '{' && ch != '}') || (top == '[' && ch != ']')) ----->  return false; -----> END
 START ----->  bool ----->  check_expression (const std::string &exp) ----->  if (exp.length () % 2 != 0) ----->  std::stack<char> stack; -----> for (char ch : exp) ----->  if (ch == '(' || ch == '{' || ch == '[') ----->  stack.push (ch); ----->  if (ch == ')' || ch == '}' || ch == ']') ----->  if (stack.empty ()) ----->  char top = stack.top (); ----->  stack.pop (); ----->  if ((top == '(' && ch != ')') || (top == '{' && ch != '}') || (top == '[' && ch != ']')) ----->  return stack.empty (); -----> END
 START ----->  bool ----->  check_expression (const std::string &exp) ----->  if (exp.length () % 2 != 0) ----->  std::stack<char> stack; -----> for (char ch : exp) ----->  if (ch == '(' || ch == '{' || ch == '[') ----->  stack.push (ch); ----->  if (ch == ')' || ch == '}' || ch == ']') ----->  return stack.empty (); -----> END
 START ----->  bool ----->  check_expression (const std::string &exp) ----->  if (exp.length () % 2 != 0) ----->  std::stack<char> stack; -----> for (char ch : exp) ----->  if (ch == '(' || ch == '{' || ch == '[') ----->  if (ch == ')' || ch == '}' || ch == ']') ----->  if (stack.empty ()) ----->  return false; -----> END
 START ----->  bool ----->  check_expression (const std::string &exp) ----->  if (exp.length () % 2 != 0) ----->  std::stack<char> stack; -----> for (char ch : exp) ----->  if (ch == '(' || ch == '{' || ch == '[') ----->  if (ch == ')' || ch == '}' || ch == ']') ----->  if (stack.empty ()) ----->  char top = stack.top (); ----->  stack.pop (); ----->  if ((top == '(' && ch != ')') || (top == '{' && ch != '}') || (top == '[' && ch != ']')) ----->  return false; -----> END
 START ----->  bool ----->  check_expression (const std::string &exp) ----->  if (exp.length () % 2 != 0) ----->  std::stack<char> stack; -----> for (char ch : exp) ----->  if (ch == '(' || ch == '{' || ch == '[') ----->  if (ch == ')' || ch == '}' || ch == ']') ----->  if (stack.empty ()) ----->  char top = stack.top (); ----->  stack.pop (); ----->  if ((top == '(' && ch != ')') || (top == '{' && ch != '}') || (top == '[' && ch != ']')) ----->  return stack.empty (); -----> END
 START ----->  bool ----->  check_expression (const std::string &exp) ----->  if (exp.length () % 2 != 0) ----->  std::stack<char> stack; -----> for (char ch : exp) ----->  if (ch == '(' || ch == '{' || ch == '[') ----->  if (ch == ')' || ch == '}' || ch == ']') ----->  return stack.empty (); -----> END
