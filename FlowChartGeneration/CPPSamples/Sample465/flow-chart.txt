 START ----->  int ----->  find_peak_util (const std::vector<int> &arr, int low, int high, int n) ----->  int mid = low + (high - low) / 2; ----->  if ((mid == 0 || arr[mid - 1] <= arr[mid]) && (mid == n - 1 || arr[mid + 1] <= arr[mid])) ----->  return mid; -----> END
 START ----->  int ----->  find_peak_util (const std::vector<int> &arr, int low, int high, int n) ----->  int mid = low + (high - low) / 2; ----->  if ((mid == 0 || arr[mid - 1] <= arr[mid]) && (mid == n - 1 || arr[mid + 1] <= arr[mid])) ----->  else if (mid > 0 && arr[mid - 1] > arr[mid]) ----->  return find_peak_util (arr, low, mid - 1, n); -----> END
 START ----->  int ----->  find_peak_util (const std::vector<int> &arr, int low, int high, int n) ----->  int mid = low + (high - low) / 2; ----->  if ((mid == 0 || arr[mid - 1] <= arr[mid]) && (mid == n - 1 || arr[mid + 1] <= arr[mid])) ----->  else if (mid > 0 && arr[mid - 1] > arr[mid]) ----->  else ----->  return find_peak_util (arr, mid + 1, high, n); -----> END
