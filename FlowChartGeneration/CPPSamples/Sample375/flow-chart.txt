 START ----->  std::tuple<std::string, std::string, std::string> ----->  remove_replica (const std::tuple<std::string, std::string, std::string> &test_tup) ----->  std::set<std::string> temp; ----->  std::vector<std::string> res; -----> for (const auto &ele : { std::get<0> (test_tup), std::get<1> (test_tup), std::get<2> (test_tup) }) ----->  if (temp.find (ele) == temp.end () && temp.insert (ele).second) ----->  res.push_back (ele); ----->  return std::make_tuple (res[0], res[1], res[2]); -----> END
 START ----->  std::tuple<std::string, std::string, std::string> ----->  remove_replica (const std::tuple<std::string, std::string, std::string> &test_tup) ----->  std::set<std::string> temp; ----->  std::vector<std::string> res; -----> for (const auto &ele : { std::get<0> (test_tup), std::get<1> (test_tup), std::get<2> (test_tup) }) ----->  if (temp.find (ele) == temp.end () && temp.insert (ele).second) ----->  else ----->  res.push_back ("MSP"); ----->  return std::make_tuple (res[0], res[1], res[2]); -----> END
