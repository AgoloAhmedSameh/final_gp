 START ----->  std::pair<bool, bool> ----->  is_sublist (const std::vector<int> &l, const std::vector<int> &s) ----->  bool sub_set = false; ----->  if (s.empty ()) ----->  sub_set = true; ----->  return { sub_set, false }; -----> END
 START ----->  std::pair<bool, bool> ----->  is_sublist (const std::vector<int> &l, const std::vector<int> &s) ----->  bool sub_set = false; ----->  if (s.empty ()) ----->  else if (s == l) ----->  sub_set = true; ----->  return { sub_set, false }; -----> END
 START ----->  std::pair<bool, bool> ----->  is_sublist (const std::vector<int> &l, const std::vector<int> &s) ----->  bool sub_set = false; ----->  if (s.empty ()) ----->  else if (s == l) ----->  else if (s.size () > l.size ()) ----->  sub_set = false; ----->  return { sub_set, false }; -----> END
 START ----->  std::pair<bool, bool> ----->  is_sublist (const std::vector<int> &l, const std::vector<int> &s) ----->  bool sub_set = false; ----->  if (s.empty ()) ----->  else if (s == l) ----->  else if (s.size () > l.size ()) ----->  else -----> for (size_t i = 0; i < l.size (); ++i) ----->  if (l[i] == s[0]) ----->  size_t n = 1; -----> while (n < s.size () && l[i + n] == s[n]) ----->  n++; ----->  if (n == s.size ()) ----->  sub_set = true; ----->  break; ----->  return { sub_set, false }; -----> END
 START ----->  std::pair<bool, bool> ----->  is_sublist (const std::vector<int> &l, const std::vector<int> &s) ----->  bool sub_set = false; ----->  if (s.empty ()) ----->  else if (s == l) ----->  else if (s.size () > l.size ()) ----->  else -----> for (size_t i = 0; i < l.size (); ++i) ----->  if (l[i] == s[0]) ----->  size_t n = 1; -----> while (n < s.size () && l[i + n] == s[n]) ----->  n++; ----->  if (n == s.size ()) ----->  return { sub_set, false }; -----> END
 START ----->  std::pair<bool, bool> ----->  is_sublist (const std::vector<int> &l, const std::vector<int> &s) ----->  bool sub_set = false; ----->  if (s.empty ()) ----->  else if (s == l) ----->  else if (s.size () > l.size ()) ----->  else -----> for (size_t i = 0; i < l.size (); ++i) ----->  if (l[i] == s[0]) ----->  return { sub_set, false }; -----> END
