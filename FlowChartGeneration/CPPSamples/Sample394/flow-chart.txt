 START ----->  char ----->  first_non_repeating_character (const std::string &str1) ----->  std::vector<char> char_order; ----->  std::unordered_map<char, int> ctr; -----> for (char c : str1) ----->  if (ctr.find (c) != ctr.end ()) ----->  ctr[c] += 1; -----> for (char c : char_order) ----->  if (ctr[c] == 1) ----->  return c; -----> END
 START ----->  char ----->  first_non_repeating_character (const std::string &str1) ----->  std::vector<char> char_order; ----->  std::unordered_map<char, int> ctr; -----> for (char c : str1) ----->  if (ctr.find (c) != ctr.end ()) ----->  ctr[c] += 1; -----> for (char c : char_order) ----->  if (ctr[c] == 1) ----->  return '\0'; -----> END
 START ----->  char ----->  first_non_repeating_character (const std::string &str1) ----->  std::vector<char> char_order; ----->  std::unordered_map<char, int> ctr; -----> for (char c : str1) ----->  if (ctr.find (c) != ctr.end ()) ----->  else ----->  ctr[c] = 1; ----->  char_order.push_back (c); -----> for (char c : char_order) ----->  if (ctr[c] == 1) ----->  return c; -----> END
 START ----->  char ----->  first_non_repeating_character (const std::string &str1) ----->  std::vector<char> char_order; ----->  std::unordered_map<char, int> ctr; -----> for (char c : str1) ----->  if (ctr.find (c) != ctr.end ()) ----->  else ----->  ctr[c] = 1; ----->  char_order.push_back (c); -----> for (char c : char_order) ----->  if (ctr[c] == 1) ----->  return '\0'; -----> END
