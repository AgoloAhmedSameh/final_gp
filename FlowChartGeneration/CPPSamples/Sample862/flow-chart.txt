 START ----->  using namespace std; ----->  pair<int, int> ----->  find_longest_conseq_subseq (vector<int> &arr, int n) ----->  int ans = 0; ----->  int count = 0; ----->  sort (arr.begin (), arr.end ()); ----->  vector<int> v; ----->  v.push_back (arr[0]); -----> for (int i = 1; i < n; i++) ----->  if (arr[i] != arr[i - 1]) ----->  v.push_back (arr[i]); -----> for (int i = 0; i < v.size (); i++) ----->  if (i > 0 && v[i] == v[i - 1] + 1) ----->  count += 1; ----->  ans = max (ans, count); ----->  return { ans, 0 }; -----> END
 START ----->  using namespace std; ----->  pair<int, int> ----->  find_longest_conseq_subseq (vector<int> &arr, int n) ----->  int ans = 0; ----->  int count = 0; ----->  sort (arr.begin (), arr.end ()); ----->  vector<int> v; ----->  v.push_back (arr[0]); -----> for (int i = 1; i < n; i++) ----->  if (arr[i] != arr[i - 1]) ----->  v.push_back (arr[i]); -----> for (int i = 0; i < v.size (); i++) ----->  if (i > 0 && v[i] == v[i - 1] + 1) ----->  else ----->  count = 1; ----->  ans = max (ans, count); ----->  return { ans, 0 }; -----> END
 START ----->  using namespace std; ----->  pair<int, int> ----->  find_longest_conseq_subseq (vector<int> &arr, int n) ----->  int ans = 0; ----->  int count = 0; ----->  sort (arr.begin (), arr.end ()); ----->  vector<int> v; ----->  v.push_back (arr[0]); -----> for (int i = 1; i < n; i++) ----->  if (arr[i] != arr[i - 1]) -----> for (int i = 0; i < v.size (); i++) ----->  if (i > 0 && v[i] == v[i - 1] + 1) ----->  count += 1; ----->  ans = max (ans, count); ----->  return { ans, 0 }; -----> END
 START ----->  using namespace std; ----->  pair<int, int> ----->  find_longest_conseq_subseq (vector<int> &arr, int n) ----->  int ans = 0; ----->  int count = 0; ----->  sort (arr.begin (), arr.end ()); ----->  vector<int> v; ----->  v.push_back (arr[0]); -----> for (int i = 1; i < n; i++) ----->  if (arr[i] != arr[i - 1]) -----> for (int i = 0; i < v.size (); i++) ----->  if (i > 0 && v[i] == v[i - 1] + 1) ----->  else ----->  count = 1; ----->  ans = max (ans, count); ----->  return { ans, 0 }; -----> END
