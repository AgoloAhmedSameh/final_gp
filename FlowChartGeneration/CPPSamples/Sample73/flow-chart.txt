 START ----->  std::pair<bool, bool> ----->  is_samepatterns (const std::vector<std::string> &colors, const std::vector<std::string> &patterns) ----->  if (colors.size () != patterns.size ()) ----->  return { false, false }; -----> END
 START ----->  std::pair<bool, bool> ----->  is_samepatterns (const std::vector<std::string> &colors, const std::vector<std::string> &patterns) ----->  if (colors.size () != patterns.size ()) ----->  std::unordered_map<std::string, std::vector<std::string> > sdict; ----->  std::unordered_set<std::string> pset; ----->  std::unordered_set<std::string> sset; -----> for (size_t i = 0; i < patterns.size (); ++i) ----->  pset.insert (patterns[i]); ----->  sset.insert (colors[i]); ----->  sdict[patterns[i]].push_back (colors[i]); ----->  if (pset.size () != sset.size ()) ----->  return { false, false }; -----> END
 START ----->  std::pair<bool, bool> ----->  is_samepatterns (const std::vector<std::string> &colors, const std::vector<std::string> &patterns) ----->  if (colors.size () != patterns.size ()) ----->  std::unordered_map<std::string, std::vector<std::string> > sdict; ----->  std::unordered_set<std::string> pset; ----->  std::unordered_set<std::string> sset; -----> for (size_t i = 0; i < patterns.size (); ++i) ----->  pset.insert (patterns[i]); ----->  sset.insert (colors[i]); ----->  sdict[patterns[i]].push_back (colors[i]); ----->  if (pset.size () != sset.size ()) -----> for (const auto &values : sdict) ----->  const std::vector<std::string> &colorValues = values.second; -----> for (size_t i = 0; i < colorValues.size () - 1; ++i) ----->  if (colorValues[i] != colorValues[i + 1]) ----->  return { false, false }; -----> END
