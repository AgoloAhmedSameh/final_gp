 START ----->  int ----->  digits_sum (int n) ----->  int neg = 1; ----->  if (n < 0) ----->  n = -n; ----->  neg = -1; ----->  std::vector<int> digits; -----> while (n > 0) ----->  digits.push_back (n % 10); ----->  n /= 10; ----->  if (neg == -1) ----->  digits[0] *= neg; ----->  return std::accumulate (digits.begin (), digits.end (), 0); -----> END
 START ----->  int ----->  digits_sum (int n) ----->  int neg = 1; ----->  if (n < 0) ----->  n = -n; ----->  neg = -1; ----->  std::vector<int> digits; -----> while (n > 0) ----->  digits.push_back (n % 10); ----->  n /= 10; ----->  if (neg == -1) ----->  return std::accumulate (digits.begin (), digits.end (), 0); -----> END
 START ----->  int ----->  digits_sum (int n) ----->  int neg = 1; ----->  if (n < 0) ----->  std::vector<int> digits; -----> while (n > 0) ----->  digits.push_back (n % 10); ----->  n /= 10; ----->  if (neg == -1) ----->  digits[0] *= neg; ----->  return std::accumulate (digits.begin (), digits.end (), 0); -----> END
 START ----->  int ----->  digits_sum (int n) ----->  int neg = 1; ----->  if (n < 0) ----->  std::vector<int> digits; -----> while (n > 0) ----->  digits.push_back (n % 10); ----->  n /= 10; ----->  if (neg == -1) ----->  return std::accumulate (digits.begin (), digits.end (), 0); -----> END
