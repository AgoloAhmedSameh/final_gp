 START ----->  bool ----->  is_valid_parenthese (const std::string &str1) ----->  std::stack<char> stack; ----->  std::unordered_map<char, char> pchar = { { '(', ')' }, { '{', '}' }, { '[', ']' } }; -----> for (char parenthese : str1) ----->  if (pchar.find (parenthese) != pchar.end ()) ----->  stack.push (parenthese); ----->  return stack.empty (); -----> END
 START ----->  bool ----->  is_valid_parenthese (const std::string &str1) ----->  std::stack<char> stack; ----->  std::unordered_map<char, char> pchar = { { '(', ')' }, { '{', '}' }, { '[', ']' } }; -----> for (char parenthese : str1) ----->  if (pchar.find (parenthese) != pchar.end ()) ----->  else if (stack.empty () || pchar[stack.top ()] != parenthese) ----->  return false; -----> END
 START ----->  bool ----->  is_valid_parenthese (const std::string &str1) ----->  std::stack<char> stack; ----->  std::unordered_map<char, char> pchar = { { '(', ')' }, { '{', '}' }, { '[', ']' } }; -----> for (char parenthese : str1) ----->  if (pchar.find (parenthese) != pchar.end ()) ----->  else if (stack.empty () || pchar[stack.top ()] != parenthese) ----->  else ----->  stack.pop (); ----->  return stack.empty (); -----> END
