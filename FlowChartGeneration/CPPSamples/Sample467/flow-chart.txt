 START ----->  using namespace std; ----->  pair<int, int> ----->  max_product (vector<int> &arr, int n) ----->  vector<int> mpis (n, 0); -----> for (int i = 0; i < n; i++) ----->  mpis[i] = arr[i]; -----> for (int i = 1; i < n; i++) -----> for (int j = 0; j < i; j++) ----->  if (arr[i] > arr[j] && mpis[i] < (mpis[j] * arr[i])) ----->  mpis[i] = mpis[j] * arr[i];
 START ----->  using namespace std; ----->  pair<int, int> ----->  max_product (vector<int> &arr, int n) ----->  vector<int> mpis (n, 0); -----> for (int i = 0; i < n; i++) ----->  mpis[i] = arr[i]; -----> for (int i = 1; i < n; i++) -----> for (int j = 0; j < i; j++) ----->  if (arr[i] > arr[j] && mpis[i] < (mpis[j] * arr[i])) ----->  for (int j = 0; j < i; j++) ----->  if (arr[i] > arr[j] && mpis[i] < (mpis[j] * arr[i])) ----->  mpis[i] = mpis[j] * arr[i];
 START ----->  using namespace std; ----->  pair<int, int> ----->  max_product (vector<int> &arr, int n) ----->  vector<int> mpis (n, 0); -----> for (int i = 0; i < n; i++) ----->  mpis[i] = arr[i]; -----> for (int i = 1; i < n; i++) -----> for (int j = 0; j < i; j++) ----->  if (arr[i] > arr[j] && mpis[i] < (mpis[j] * arr[i])) ----->  for (int j = 0; j < i; j++) ----->  return *max_element (mpis.begin (), mpis.end ()); -----> END
