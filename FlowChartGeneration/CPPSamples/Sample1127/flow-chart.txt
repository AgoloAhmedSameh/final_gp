 START ----->  std::string ----->  Strongest_Extension (const std::string &class_name, const std::vector<std::string> &extensions) ----->  std::string strong = extensions[0]; ----->  int my_val = 0; -----> for (char x : extensions[0]) ----->  if (isalpha (x)) ----->  if (isupper (x)) ----->  my_val++; -----> for (const auto &s : extensions) ----->  int val = 0; -----> for (char x : s) ----->  if (isalpha (x)) ----->  if (isupper (x)) ----->  val++; ----->  if (val > my_val) ----->  strong = s; ----->  my_val = val; ----->  return class_name + "." + strong; -----> END
 START ----->  std::string ----->  Strongest_Extension (const std::string &class_name, const std::vector<std::string> &extensions) ----->  std::string strong = extensions[0]; ----->  int my_val = 0; -----> for (char x : extensions[0]) ----->  if (isalpha (x)) ----->  if (isupper (x)) ----->  my_val++; -----> for (const auto &s : extensions) ----->  int val = 0; -----> for (char x : s) ----->  if (isalpha (x)) ----->  if (isupper (x)) ----->  val++; ----->  if (val > my_val) ----->  return class_name + "." + strong; -----> END
 START ----->  std::string ----->  Strongest_Extension (const std::string &class_name, const std::vector<std::string> &extensions) ----->  std::string strong = extensions[0]; ----->  int my_val = 0; -----> for (char x : extensions[0]) ----->  if (isalpha (x)) ----->  if (isupper (x)) ----->  my_val++; -----> for (const auto &s : extensions) ----->  int val = 0; -----> for (char x : s) ----->  if (isalpha (x)) ----->  if (isupper (x)) ----->  else ----->  val--; ----->  if (val > my_val) ----->  strong = s; ----->  my_val = val; ----->  return class_name + "." + strong; -----> END
 START ----->  std::string ----->  Strongest_Extension (const std::string &class_name, const std::vector<std::string> &extensions) ----->  std::string strong = extensions[0]; ----->  int my_val = 0; -----> for (char x : extensions[0]) ----->  if (isalpha (x)) ----->  if (isupper (x)) ----->  my_val++; -----> for (const auto &s : extensions) ----->  int val = 0; -----> for (char x : s) ----->  if (isalpha (x)) ----->  if (isupper (x)) ----->  else ----->  val--; ----->  if (val > my_val) ----->  return class_name + "." + strong; -----> END
 START ----->  std::string ----->  Strongest_Extension (const std::string &class_name, const std::vector<std::string> &extensions) ----->  std::string strong = extensions[0]; ----->  int my_val = 0; -----> for (char x : extensions[0]) ----->  if (isalpha (x)) ----->  if (isupper (x)) ----->  my_val++; -----> for (const auto &s : extensions) ----->  int val = 0; -----> for (char x : s) ----->  if (isalpha (x)) ----->  if (val > my_val) ----->  strong = s; ----->  my_val = val; ----->  return class_name + "." + strong; -----> END
 START ----->  std::string ----->  Strongest_Extension (const std::string &class_name, const std::vector<std::string> &extensions) ----->  std::string strong = extensions[0]; ----->  int my_val = 0; -----> for (char x : extensions[0]) ----->  if (isalpha (x)) ----->  if (isupper (x)) ----->  my_val++; -----> for (const auto &s : extensions) ----->  int val = 0; -----> for (char x : s) ----->  if (isalpha (x)) ----->  if (val > my_val) ----->  return class_name + "." + strong; -----> END
 START ----->  std::string ----->  Strongest_Extension (const std::string &class_name, const std::vector<std::string> &extensions) ----->  std::string strong = extensions[0]; ----->  int my_val = 0; -----> for (char x : extensions[0]) ----->  if (isalpha (x)) ----->  if (isupper (x)) ----->  else ----->  my_val--; -----> for (const auto &s : extensions) ----->  int val = 0; -----> for (char x : s) ----->  if (isalpha (x)) ----->  if (isupper (x)) ----->  val++; ----->  if (val > my_val) ----->  strong = s; ----->  my_val = val; ----->  return class_name + "." + strong; -----> END
 START ----->  std::string ----->  Strongest_Extension (const std::string &class_name, const std::vector<std::string> &extensions) ----->  std::string strong = extensions[0]; ----->  int my_val = 0; -----> for (char x : extensions[0]) ----->  if (isalpha (x)) ----->  if (isupper (x)) ----->  else ----->  my_val--; -----> for (const auto &s : extensions) ----->  int val = 0; -----> for (char x : s) ----->  if (isalpha (x)) ----->  if (isupper (x)) ----->  val++; ----->  if (val > my_val) ----->  return class_name + "." + strong; -----> END
 START ----->  std::string ----->  Strongest_Extension (const std::string &class_name, const std::vector<std::string> &extensions) ----->  std::string strong = extensions[0]; ----->  int my_val = 0; -----> for (char x : extensions[0]) ----->  if (isalpha (x)) ----->  if (isupper (x)) ----->  else ----->  my_val--; -----> for (const auto &s : extensions) ----->  int val = 0; -----> for (char x : s) ----->  if (isalpha (x)) ----->  if (isupper (x)) ----->  else ----->  val--; ----->  if (val > my_val) ----->  strong = s; ----->  my_val = val; ----->  return class_name + "." + strong; -----> END
 START ----->  std::string ----->  Strongest_Extension (const std::string &class_name, const std::vector<std::string> &extensions) ----->  std::string strong = extensions[0]; ----->  int my_val = 0; -----> for (char x : extensions[0]) ----->  if (isalpha (x)) ----->  if (isupper (x)) ----->  else ----->  my_val--; -----> for (const auto &s : extensions) ----->  int val = 0; -----> for (char x : s) ----->  if (isalpha (x)) ----->  if (isupper (x)) ----->  else ----->  val--; ----->  if (val > my_val) ----->  return class_name + "." + strong; -----> END
 START ----->  std::string ----->  Strongest_Extension (const std::string &class_name, const std::vector<std::string> &extensions) ----->  std::string strong = extensions[0]; ----->  int my_val = 0; -----> for (char x : extensions[0]) ----->  if (isalpha (x)) ----->  if (isupper (x)) ----->  else ----->  my_val--; -----> for (const auto &s : extensions) ----->  int val = 0; -----> for (char x : s) ----->  if (isalpha (x)) ----->  if (val > my_val) ----->  strong = s; ----->  my_val = val; ----->  return class_name + "." + strong; -----> END
 START ----->  std::string ----->  Strongest_Extension (const std::string &class_name, const std::vector<std::string> &extensions) ----->  std::string strong = extensions[0]; ----->  int my_val = 0; -----> for (char x : extensions[0]) ----->  if (isalpha (x)) ----->  if (isupper (x)) ----->  else ----->  my_val--; -----> for (const auto &s : extensions) ----->  int val = 0; -----> for (char x : s) ----->  if (isalpha (x)) ----->  if (val > my_val) ----->  return class_name + "." + strong; -----> END
 START ----->  std::string ----->  Strongest_Extension (const std::string &class_name, const std::vector<std::string> &extensions) ----->  std::string strong = extensions[0]; ----->  int my_val = 0; -----> for (char x : extensions[0]) ----->  if (isalpha (x)) -----> for (const auto &s : extensions) ----->  int val = 0; -----> for (char x : s) ----->  if (isalpha (x)) ----->  if (isupper (x)) ----->  val++; ----->  if (val > my_val) ----->  strong = s; ----->  my_val = val; ----->  return class_name + "." + strong; -----> END
 START ----->  std::string ----->  Strongest_Extension (const std::string &class_name, const std::vector<std::string> &extensions) ----->  std::string strong = extensions[0]; ----->  int my_val = 0; -----> for (char x : extensions[0]) ----->  if (isalpha (x)) -----> for (const auto &s : extensions) ----->  int val = 0; -----> for (char x : s) ----->  if (isalpha (x)) ----->  if (isupper (x)) ----->  val++; ----->  if (val > my_val) ----->  return class_name + "." + strong; -----> END
 START ----->  std::string ----->  Strongest_Extension (const std::string &class_name, const std::vector<std::string> &extensions) ----->  std::string strong = extensions[0]; ----->  int my_val = 0; -----> for (char x : extensions[0]) ----->  if (isalpha (x)) -----> for (const auto &s : extensions) ----->  int val = 0; -----> for (char x : s) ----->  if (isalpha (x)) ----->  if (isupper (x)) ----->  else ----->  val--; ----->  if (val > my_val) ----->  strong = s; ----->  my_val = val; ----->  return class_name + "." + strong; -----> END
 START ----->  std::string ----->  Strongest_Extension (const std::string &class_name, const std::vector<std::string> &extensions) ----->  std::string strong = extensions[0]; ----->  int my_val = 0; -----> for (char x : extensions[0]) ----->  if (isalpha (x)) -----> for (const auto &s : extensions) ----->  int val = 0; -----> for (char x : s) ----->  if (isalpha (x)) ----->  if (isupper (x)) ----->  else ----->  val--; ----->  if (val > my_val) ----->  return class_name + "." + strong; -----> END
 START ----->  std::string ----->  Strongest_Extension (const std::string &class_name, const std::vector<std::string> &extensions) ----->  std::string strong = extensions[0]; ----->  int my_val = 0; -----> for (char x : extensions[0]) ----->  if (isalpha (x)) -----> for (const auto &s : extensions) ----->  int val = 0; -----> for (char x : s) ----->  if (isalpha (x)) ----->  if (val > my_val) ----->  strong = s; ----->  my_val = val; ----->  return class_name + "." + strong; -----> END
 START ----->  std::string ----->  Strongest_Extension (const std::string &class_name, const std::vector<std::string> &extensions) ----->  std::string strong = extensions[0]; ----->  int my_val = 0; -----> for (char x : extensions[0]) ----->  if (isalpha (x)) -----> for (const auto &s : extensions) ----->  int val = 0; -----> for (char x : s) ----->  if (isalpha (x)) ----->  if (val > my_val) ----->  return class_name + "." + strong; -----> END
