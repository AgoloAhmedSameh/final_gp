 START ----->  std::vector<std::variant<int, std::vector<int> > > ----->  flatten_list (const std::vector<std::variant<int, std::vector<int> > > &list1) ----->  std::vector<std::variant<int, std::vector<int> > > result_list; ----->  if (list1.empty ()) ----->  return result_list; -----> END
 START ----->  std::vector<std::variant<int, std::vector<int> > > ----->  flatten_list (const std::vector<std::variant<int, std::vector<int> > > &list1) ----->  std::vector<std::variant<int, std::vector<int> > > result_list; ----->  if (list1.empty ()) ----->  std::stack<std::vector<std::variant<int, std::vector<int> > > > stack; ----->  stack.push (list1); -----> while (!stack.empty ()) ----->  auto c_num = stack.top (); ----->  stack.pop (); ----->  if (!c_num.empty ()) ----->  auto next = c_num.back (); ----->  c_num.pop_back (); ----->  if (!c_num.empty ()) ----->  stack.push (c_num); ----->  if (auto nested_list = std::get_if<std::vector<int> > (&next)) ----->  if (!nested_list->empty ()) ----->  stack.push (*nested_list); ----->  std::reverse (result_list.begin (), result_list.end ()); ----->  return result_list; -----> END
 START ----->  std::vector<std::variant<int, std::vector<int> > > ----->  flatten_list (const std::vector<std::variant<int, std::vector<int> > > &list1) ----->  std::vector<std::variant<int, std::vector<int> > > result_list; ----->  if (list1.empty ()) ----->  std::stack<std::vector<std::variant<int, std::vector<int> > > > stack; ----->  stack.push (list1); -----> while (!stack.empty ()) ----->  auto c_num = stack.top (); ----->  stack.pop (); ----->  if (!c_num.empty ()) ----->  auto next = c_num.back (); ----->  c_num.pop_back (); ----->  if (!c_num.empty ()) ----->  stack.push (c_num); ----->  if (auto nested_list = std::get_if<std::vector<int> > (&next)) ----->  if (!nested_list->empty ()) ----->  std::reverse (result_list.begin (), result_list.end ()); ----->  return result_list; -----> END
 START ----->  std::vector<std::variant<int, std::vector<int> > > ----->  flatten_list (const std::vector<std::variant<int, std::vector<int> > > &list1) ----->  std::vector<std::variant<int, std::vector<int> > > result_list; ----->  if (list1.empty ()) ----->  std::stack<std::vector<std::variant<int, std::vector<int> > > > stack; ----->  stack.push (list1); -----> while (!stack.empty ()) ----->  auto c_num = stack.top (); ----->  stack.pop (); ----->  if (!c_num.empty ()) ----->  auto next = c_num.back (); ----->  c_num.pop_back (); ----->  if (!c_num.empty ()) ----->  stack.push (c_num); ----->  if (auto nested_list = std::get_if<std::vector<int> > (&next)) ----->  else ----->  result_list.push_back (next); ----->  std::reverse (result_list.begin (), result_list.end ()); ----->  return result_list; -----> END
 START ----->  std::vector<std::variant<int, std::vector<int> > > ----->  flatten_list (const std::vector<std::variant<int, std::vector<int> > > &list1) ----->  std::vector<std::variant<int, std::vector<int> > > result_list; ----->  if (list1.empty ()) ----->  std::stack<std::vector<std::variant<int, std::vector<int> > > > stack; ----->  stack.push (list1); -----> while (!stack.empty ()) ----->  auto c_num = stack.top (); ----->  stack.pop (); ----->  if (!c_num.empty ()) ----->  auto next = c_num.back (); ----->  c_num.pop_back (); ----->  if (!c_num.empty ()) ----->  if (auto nested_list = std::get_if<std::vector<int> > (&next)) ----->  if (!nested_list->empty ()) ----->  stack.push (*nested_list); ----->  std::reverse (result_list.begin (), result_list.end ()); ----->  return result_list; -----> END
 START ----->  std::vector<std::variant<int, std::vector<int> > > ----->  flatten_list (const std::vector<std::variant<int, std::vector<int> > > &list1) ----->  std::vector<std::variant<int, std::vector<int> > > result_list; ----->  if (list1.empty ()) ----->  std::stack<std::vector<std::variant<int, std::vector<int> > > > stack; ----->  stack.push (list1); -----> while (!stack.empty ()) ----->  auto c_num = stack.top (); ----->  stack.pop (); ----->  if (!c_num.empty ()) ----->  auto next = c_num.back (); ----->  c_num.pop_back (); ----->  if (!c_num.empty ()) ----->  if (auto nested_list = std::get_if<std::vector<int> > (&next)) ----->  if (!nested_list->empty ()) ----->  std::reverse (result_list.begin (), result_list.end ()); ----->  return result_list; -----> END
 START ----->  std::vector<std::variant<int, std::vector<int> > > ----->  flatten_list (const std::vector<std::variant<int, std::vector<int> > > &list1) ----->  std::vector<std::variant<int, std::vector<int> > > result_list; ----->  if (list1.empty ()) ----->  std::stack<std::vector<std::variant<int, std::vector<int> > > > stack; ----->  stack.push (list1); -----> while (!stack.empty ()) ----->  auto c_num = stack.top (); ----->  stack.pop (); ----->  if (!c_num.empty ()) ----->  auto next = c_num.back (); ----->  c_num.pop_back (); ----->  if (!c_num.empty ()) ----->  if (auto nested_list = std::get_if<std::vector<int> > (&next)) ----->  else ----->  result_list.push_back (next); ----->  std::reverse (result_list.begin (), result_list.end ()); ----->  return result_list; -----> END
 START ----->  std::vector<std::variant<int, std::vector<int> > > ----->  flatten_list (const std::vector<std::variant<int, std::vector<int> > > &list1) ----->  std::vector<std::variant<int, std::vector<int> > > result_list; ----->  if (list1.empty ()) ----->  std::stack<std::vector<std::variant<int, std::vector<int> > > > stack; ----->  stack.push (list1); -----> while (!stack.empty ()) ----->  auto c_num = stack.top (); ----->  stack.pop (); ----->  if (!c_num.empty ()) ----->  std::reverse (result_list.begin (), result_list.end ()); ----->  return result_list; -----> END
