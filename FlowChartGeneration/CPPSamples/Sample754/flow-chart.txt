 START ----->  std::pair<int, bool> ----->  second_smallest (const std::vector<int> &numbers) ----->  if (numbers.size () < 2) ----->  return { 0, false }; -----> END
 START ----->  std::pair<int, bool> ----->  second_smallest (const std::vector<int> &numbers) ----->  if (numbers.size () < 2) ----->  if (numbers.size () == 2 && numbers[0] == numbers[1]) ----->  return { 0, false }; -----> END
 START ----->  std::pair<int, bool> ----->  second_smallest (const std::vector<int> &numbers) ----->  if (numbers.size () < 2) ----->  if (numbers.size () == 2 && numbers[0] == numbers[1]) ----->  std::set<int> dup_items; ----->  std::vector<int> uniq_items; -----> for (int x : numbers) ----->  if (dup_items.find (x) == dup_items.end ()) ----->  uniq_items.push_back (x); ----->  dup_items.insert (x); ----->  std::sort (uniq_items.begin (), uniq_items.end ()); ----->  return { uniq_items[1], true }; -----> END
 START ----->  std::pair<int, bool> ----->  second_smallest (const std::vector<int> &numbers) ----->  if (numbers.size () < 2) ----->  if (numbers.size () == 2 && numbers[0] == numbers[1]) ----->  std::set<int> dup_items; ----->  std::vector<int> uniq_items; -----> for (int x : numbers) ----->  if (dup_items.find (x) == dup_items.end ()) ----->  std::sort (uniq_items.begin (), uniq_items.end ()); ----->  return { uniq_items[1], true }; -----> END
